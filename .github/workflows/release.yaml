name: Release
on:
  push:
    tags:
      - "v*"

permissions:
  id-token: write

env:
  REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Prepare data
        run: |
          cd test-data
          docker compose -f docker-compose.yaml -f docker-compose.2.yaml create --pull missing
          docker compose -f docker-compose.yaml -f docker-compose.2.yaml up -d
          cd ../
          echo "waiting for start"
          sleep 5

          # add data to shared volume
          cd test-data
          echo "Payload" | docker compose -f docker-compose.yaml -f docker-compose.2.yaml exec -T dummy /bin/sh -c 'cat - > /data/helloworld'
          cd ../

      - name: Initial check
        run: |
          data="$(curl -v http://127.0.0.1:8080/helloworld)"
          [ "$data" = "Payload" ]

      - name: Create backup
        run: |
          rm -rf backups
          ./dkp/dkp.py -o backups/output.bin -p foobar test-data

      - name: Cleanup
        run: |
          docker stop $(docker ps -q)
          docker rm $(docker ps -aq)
          docker volume rm $(docker volume ls -q)
          docker rmi $(docker images -aq)

      - name: Restore and start
        run: |
          cd backups
          ./output.bin -r -s foobar
          cd ..
          echo "waiting..."
          sleep 5

      - name: Check
        run: |
          data="$(curl -v http://127.0.0.1:8080/helloworld)"
          [ "$data" = "Payload" ]

  release:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/reddec/dkp
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Build package
        run: |
          sudo apt install -y python3-poetry
          poetry build

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
